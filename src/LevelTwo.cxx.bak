// Implementation of L2 trigger daq ids, used for masking 
// L2sum in the trigger files

#include "LevelTwo.h"

ClassImp(LevelTwo)

namespace
{
  const Int_t N_TRIG = 9;
  enum trigger_enum 
  {
    kAll,
    kHT0,
    kSmBS0,
    kSmBS1,
    kLgBS0,
    kLgBS1,
    kJP1,
    kJP2,
    kdijet
  };
  const Int_t int_max = 0xFFFF;
};

LevelTwo::LevelTwo()
{
  N = N_TRIG;

  // get spindir
  if(gSystem->Getenv("SPINDIR")==NULL){fprintf(stderr,"ERROR: source env vars\n");return;};
  sscanf(gSystem->Getenv("SPINDIR"),"%s",spindir);


  // fms trigger names
  trigger_name.insert(std::pair<Int_t,char*>(kAll,"All"));
  trigger_name.insert(std::pair<Int_t,char*>(kHT0,"HT0"));
  trigger_name.insert(std::pair<Int_t,char*>(kSmBS0,"SmBS0"));
  trigger_name.insert(std::pair<Int_t,char*>(kSmBS1,"SmBS1"));
  trigger_name.insert(std::pair<Int_t,char*>(kLgBS0,"LgBS0"));
  trigger_name.insert(std::pair<Int_t,char*>(kLgBS1,"LgBS1"));
  trigger_name.insert(std::pair<Int_t,char*>(kJP1,"JP1"));
  trigger_name.insert(std::pair<Int_t,char*>(kJP2,"JP2"));
  trigger_name.insert(std::pair<Int_t,char*>(kdijet,"dijet"));


  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kAll,0xFFF));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kHT0,1<<0));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kHT1,1<<1));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kSmBS0,1<<2));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kSmBS1,1<<3));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kunused1,1<<4));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kLgBS0,1<<5));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kLgBS1,1<<6));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kLgBS2,1<<7));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kJP0,1<<8));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kJP1,1<<9));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kJP2,1<<10));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kdijet,1<<11));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kfmsfpe1,1<<12));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kfmsfpe2,1<<13));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kFPE,1<<14));
  trigger_bitmask.insert(std::pair<Int_t,Int_t>(kunused2,1<<15));


  //std::map<char*,Int_t> trigger_idx; // trigger name --> trigger idx
  //std::map<Int_t,Int_t> trigger_bitmask_rev; // trigger FP201 bit mask --> trigger idx
  for(Int_t t=0; t<N_TRIG; t++)
  {
    trigger_idx.insert(std::pair<std::string,Int_t>(std::string(trigger_name[t]),t));
    trigger_bitmaskrev.insert(std::pair<Int_t,Int_t>(trigger_bitmask[t],t));
  };


  // read trigid.dat
  /*
  id_tr = new TTree();
  char trigidfile[512];
  sprintf(trigidfile,"%s/trigid.dat",spindir);
  id_tr->ReadFile(trigidfile,"rn/I:dbidx/I:name/C");
  Int_t rn,dbidx;
  char name[32];
  id_tr->SetBranchAddress("rn",&rn);
  id_tr->SetBranchAddress("dbidx",&dbidx);
  id_tr->SetBranchAddress("name",name);
  std::map<Int_t,Long_t> trig_idx; // trigger idx --> trigger dbidx
  std::map<Int_t,Long_t> rptrig_idx; // rptrigger idx --> rptrigger dbidx
  id_tr->GetEntry(0); 
  Int_t rn_tmp=rn;
  Int_t rprn_tmp=rn;
  Int_t idx;
  Long_t mask;
  Long_t allmask=0;
  Long_t rpallmask=0;
  TString name_str;
  
  // build mask map
  for(Int_t i=0; i<id_tr->GetEntries(); i++)
  {
    id_tr->GetEntry(i);
    name_str = TString(name);

    // check for FMS triggers
    if(name_str(0,3)=="FMS")
    {
      idx = trigger_dbidx.at(std::string(name));

      mask = (long)1 << dbidx;
      //if(idx!=kLED) allmask = allmask | mask;

      trig_idx.insert(std::pair<Int_t,Long_t>(idx,mask));
      if(rn != rn_tmp || i+1==id_tr->GetEntries())
      {
        idx = trigger_idx.at(std::string("All"));
        trig_idx.insert(std::pair<Int_t,Long_t>(idx,allmask));
        mask_map.insert(std::pair<Int_t,std::map<Int_t,Long_t> >(rn_tmp,trig_idx));
        rn_tmp=rn;
        trig_idx.clear();
        allmask=0;
      };
    }

    // check for RP triggers
    else if(name_str(0,2)=="RP")
    {
      idx = rptrigger_dbidx.at(std::string(name));

      mask = (long)1 << dbidx;
      rpallmask = rpallmask | mask;

      rptrig_idx.insert(std::pair<Int_t,Long_t>(idx,mask));
      if(rn != rprn_tmp || i+1==id_tr->GetEntries())
      {
        idx = rptrigger_idx.at(std::string("All"));
        rptrig_idx.insert(std::pair<Int_t,Long_t>(idx,rpallmask));
        rpmask_map.insert(std::pair<Int_t,std::map<Int_t,Long_t> >(rprn_tmp,rptrig_idx));
        rprn_tmp=rn;
        rptrig_idx.clear();
        rpallmask=0;
      };
    }
    else fprintf(stderr,"ERROR: not FMS or RP trigger\n");
  };
  */
};

// fms accessors
//////////////////
Int_t LevelTwo::Index(char * trigger0)
{
  return trigger_idx.at(std::string(trigger0));
};


/*
Int_t LevelTwo::Mask(Int_t run, char * trigger0, Int_t dword)
{
  Int_t retval;
  try { retval = (mask_map.at(run).at(Index(trigger0)) >> (32*dword)) & int_max; }
  catch(const std::out_of_range& e) 
  {
    //fprintf(stderr,"[+] no FMS triggers for run %d\n",run);
    retval=0;
  };
  return retval;
};

Int_t LevelTwo::Mask(Int_t run, Int_t num0, Int_t dword)
{
  Int_t retval;
  try { retval = (mask_map.at(run).at(num0) >> (32*dword)) & int_max; }
  catch(const std::out_of_range& e) 
  {
    //fprintf(stderr,"[+] no FMS triggers for run %d\n",run);
    retval=0;
  };
  return retval;
};
*/

Int_t LevelTwo::Mask(char * trigger0)
{
  Int_t retval;
  try { retval = trigger_bitmask.at(Index(trigger0)); }
  catch(const std::out_of_range& e)
  {
    fprintf(stderr,"[+] bad trigger name in LevelTwo::Mask(%s)\n",trigger0);
    retval=0;
  };
  return retval;
};

Int_t LevelTwo::Mask(Int_t num0)
{
  Int_t retval;
  try { retval = trigger_bitmask.at(num0); }
  catch(const std::out_of_range& e)
  {
    fprintf(stderr,"[+] bad trigger number in LevelTwo::Mask(%d)\n",num0);
    retval=0;
  };
  return retval;
};

char * LevelTwo::Name(Int_t num0)
{
  return trigger_name.at(num0);
};
